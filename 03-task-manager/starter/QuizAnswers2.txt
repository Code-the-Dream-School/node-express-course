1.) In this lesson, you created a middleware function called 
asyncWrapper. Why?

If an error occurs, the pending promise is not resolved and the server does not serve a response.
In order to make sure that the end user receives an error response, the asyncWrapper functions as middleware
that wraps our controllers and sends a response when an error is triggered. The asyncWrapper middleware helps prevent
code repetition by providing a reocurring structure for the try/catch block. 


2.) Suppose that you want to make sure that both a status code 
and an error message are sent back to the user when they 
request the URL for a task that does not exist. Assume 
that youâ€™ve created a CustomAPIError class and an error 
handler that references that class. 

Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    // your code here
    return next(createCustomError(`No task with id: ${taskID}`, 404));
  }
  res.status(200).json({ task });
})