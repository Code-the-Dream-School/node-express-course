1.In this lesson, you created a middleware function called asyncWrapper. Why?
In order to understand what goes on behind the scenes. Although we will be using 
an NPM package it is good to know exactly how it functions. Also, it will definitely 
improve code organization and readability by taking out the repetitive try catch 
code that is being used and having the function available through the asyncWrapper.


2.Suppose that you want to make sure that both a status code and an error 
message are sent back to the user when they request the URL for a task that
 does not exist. Assume that youâ€™ve created a CustomAPIError class and an error
  handler that references that class. Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    return next(CustomAPIError('Item not found:{task}',404))
  }
  res.status(200).json({ task });
});